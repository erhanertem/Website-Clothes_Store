.slideshow {
	grid-column: 1 / -1;
	grid-row: 2 / 3;

	width: 100%;
	height: 80vh;

	@include break(xl) {
		height: 70vh;
	}
	@include break(lg) {
		height: 60vh;
	}
	@include break(md) {
		height: 50vh;
	}

	position: relative;

	&-slide {
		position: absolute;
		top: 0;
		left: 0;

		//conforms the width and height of its grid-based container
		width: inherit;
		height: inherit;

		animation: slideshow 25s linear infinite;
		/* 
    Infinite cycle, linear speed, for 20s. However, all the slides are animated together. 
    In order to avoid simultaneous animation of slides, each slide needs to posses a distinct delay. 4s per slide x 5 = 20s total animation length 
    */
		// &:nth-child(1) {
		// 	animation-delay: 0s; // 0s thru 4s, #1 slide lives
		// }

		// &:nth-child(2) {
		// 	animation-delay: 4s; // 4s thru 8s, #2 slide lives
		// }

		// &:nth-child(3) {
		// 	animation-delay: 8s; // 8s thru 12s, #3 slide lives
		// }

		// &:nth-child(4) {
		// 	animation-delay: 12s; // 12s thru 16s, #4 slide lives
		// }

		// &:nth-child(5) {
		// 	animation-delay: 16s; // 16s thru 20s, #5 slide lives
		// }

		// lets summarize the above animation and put the data for each slide in a SASS list form.
		$animList: 1 0s, 2 5s, 3 10s, 4 15s, 5 20s;

		@each $item in $animList {
			&:nth-child(#{nth($item,1)}) {
				animation-delay: nth($item, 2);
			}
		}

		img {
			//conforms the width and height of its parent container which conforms to its grid-based container - cascaded inheritance
			// without this, img would only be limited to its original width and height boundaries
			width: inherit;
			height: inherit;
			object-fit: cover;
		}
	}

	&-content {
		background-color: rgba(color(secondary), 0.9);

		position: absolute;
		bottom: 6rem;
		left: 6rem;

		max-width: 40rem;
		padding: 5rem;

		@include break(xl) {
			padding: 3.5rem;
		}
		@include break(lg) {
			padding: 2rem;
		}
		@include break(md) {
			padding: 1rem;
			max-width: 20rem;
		}

		h2 {
			font-size: size(xl) + 1.2rem;
			color: color(primary);

			@include break(md) {
				font-size: size(sm);
			}
		}

		p {
			margin: 1rem 0;
			font-size: size(sm);

			@include break(md) {
				font-size: size(sm) * 0.8;
			}
		}
	}
}
